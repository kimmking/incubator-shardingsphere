/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.shardingsphere.shardingjdbc.jdbc.core.statement;

import lombok.Getter;
import org.apache.shardingsphere.shardingjdbc.jdbc.adapter.AbstractMasterSlavePreparedStatementAdapter;
import org.apache.shardingsphere.shardingjdbc.jdbc.core.connection.MGRConnection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.LinkedList;

/**
 * PreparedStatement that support MGR.
 *
 * @author zhangyonglun
 */
@Getter
public final class MGRPreparedStatement extends AbstractMasterSlavePreparedStatementAdapter {
    
    private final MGRConnection connection;
    
    private final Collection<PreparedStatement> routedStatements = new LinkedList<>();
    
    public MGRPreparedStatement(final MGRConnection connection, final String sql) throws SQLException {
        this(connection, sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }
    
    public MGRPreparedStatement(final MGRConnection connection, final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        this(connection, sql, resultSetType, resultSetConcurrency, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }
    
    public MGRPreparedStatement(
        final MGRConnection connection, final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        this.connection = connection;
        PreparedStatement preparedStatement = connection.getConnection(
            connection.getRuntimeContext().getPrimaryDataSource()).prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        routedStatements.add(preparedStatement);
    }
    
    public MGRPreparedStatement(final MGRConnection connection, final String sql, final int autoGeneratedKeys) throws SQLException {
        this.connection = connection;
        PreparedStatement preparedStatement = connection.getConnection(connection.getRuntimeContext().getPrimaryDataSource()).prepareStatement(sql, autoGeneratedKeys);
        routedStatements.add(preparedStatement);
    }
    
    public MGRPreparedStatement(final MGRConnection connection, final String sql, final int[] columnIndexes) throws SQLException {
        this.connection = connection;
        PreparedStatement preparedStatement = connection.getConnection(connection.getRuntimeContext().getPrimaryDataSource()).prepareStatement(sql, columnIndexes);
        routedStatements.add(preparedStatement);
    }
    
    public MGRPreparedStatement(final MGRConnection connection, final String sql, final String[] columnNames) throws SQLException {
        this.connection = connection;
        PreparedStatement preparedStatement = connection.getConnection(connection.getRuntimeContext().getPrimaryDataSource()).prepareStatement(sql, columnNames);
        routedStatements.add(preparedStatement);
    }
    
    @Override
    public ResultSet executeQuery() throws SQLException {
        return routedStatements.iterator().next().executeQuery();
    }
    
    @Override
    public int executeUpdate() throws SQLException {
        return routedStatements.iterator().next().executeUpdate();
    }
    
    @Override
    public boolean execute() throws SQLException {
        return routedStatements.iterator().next().execute();
    }
    
    @Override
    public void clearBatch() throws SQLException {
        routedStatements.iterator().next().clearBatch();
    }
    
    @Override
    public void addBatch() throws SQLException {
        routedStatements.iterator().next().addBatch();
    }
    
    @Override
    public int[] executeBatch() throws SQLException {
        return routedStatements.iterator().next().executeBatch();
    }
    
    @Override
    public ResultSet getResultSet() throws SQLException {
        return routedStatements.iterator().next().getResultSet();
    }
    
    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return routedStatements.iterator().next().getGeneratedKeys();
    }
    
    @Override
    public int getResultSetHoldability() throws SQLException {
        return routedStatements.iterator().next().getResultSetHoldability();
    }
    
    @Override
    public int getResultSetConcurrency() throws SQLException {
        return routedStatements.iterator().next().getResultSetConcurrency();
    }
    
    @Override
    public int getResultSetType() throws SQLException {
        return routedStatements.iterator().next().getResultSetType();
    }
    
    @Override
    public boolean isAccumulate() {
        return false;
    }
}
